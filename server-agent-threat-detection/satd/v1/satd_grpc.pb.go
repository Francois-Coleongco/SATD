// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: satd/satd.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerFeeder_Feed_FullMethodName = "/satd.ServerFeeder/Feed"
)

// ServerFeederClient is the client API for ServerFeeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerFeederClient interface {
	Feed(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NetDat, RecConf], error)
}

type serverFeederClient struct {
	cc grpc.ClientConnInterface
}

func NewServerFeederClient(cc grpc.ClientConnInterface) ServerFeederClient {
	return &serverFeederClient{cc}
}

func (c *serverFeederClient) Feed(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NetDat, RecConf], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerFeeder_ServiceDesc.Streams[0], ServerFeeder_Feed_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NetDat, RecConf]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServerFeeder_FeedClient = grpc.ClientStreamingClient[NetDat, RecConf]

// ServerFeederServer is the server API for ServerFeeder service.
// All implementations must embed UnimplementedServerFeederServer
// for forward compatibility.
type ServerFeederServer interface {
	Feed(grpc.ClientStreamingServer[NetDat, RecConf]) error
	mustEmbedUnimplementedServerFeederServer()
}

// UnimplementedServerFeederServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerFeederServer struct{}

func (UnimplementedServerFeederServer) Feed(grpc.ClientStreamingServer[NetDat, RecConf]) error {
	return status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedServerFeederServer) mustEmbedUnimplementedServerFeederServer() {}
func (UnimplementedServerFeederServer) testEmbeddedByValue()                      {}

// UnsafeServerFeederServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerFeederServer will
// result in compilation errors.
type UnsafeServerFeederServer interface {
	mustEmbedUnimplementedServerFeederServer()
}

func RegisterServerFeederServer(s grpc.ServiceRegistrar, srv ServerFeederServer) {
	// If the following call pancis, it indicates UnimplementedServerFeederServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerFeeder_ServiceDesc, srv)
}

func _ServerFeeder_Feed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerFeederServer).Feed(&grpc.GenericServerStream[NetDat, RecConf]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServerFeeder_FeedServer = grpc.ClientStreamingServer[NetDat, RecConf]

// ServerFeeder_ServiceDesc is the grpc.ServiceDesc for ServerFeeder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerFeeder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "satd.ServerFeeder",
	HandlerType: (*ServerFeederServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Feed",
			Handler:       _ServerFeeder_Feed_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "satd/satd.proto",
}
